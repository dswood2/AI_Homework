Group Number: 32
Names: Dacota Wood, Mikhail Kutepov
QS 1.1: The ReflexAgent in multiAgents is a simple reflex agent that chooses actions based on evaluating the successor game state. We improved it by considering food and ghost location and using a penalty for being closer to the ghost.
QS 1.2: The value function includes the reciprocal of the distance to the food, the penalty for being close to the ghost, and the total game score. This estimation works by prioritizing the distance to food and survival by avoiding ghosts.
QS 2.1: The minimax algorithm is  recursive search algorithm for finding the best move. It alternates between maximizing the score for Pacman and minimizing the score for ghosts, and it considers all possible actions and their consequences up to a specified depth. The algorithm works by exploring the game tree and selecting the action that leads to the maximum score.
QS 3.1: The AlphaBetaAgent minimax values should be identical to the MinimaxAgent minimax values because both agents use the same underlying minimax algorithm. The alpha-beta pruning optimizes the minimax algorithm by pruning branches that won't affect the final decision. The pruned branches do not affect the final minimax value, so the values between the two agents should match.
QS 3.2: In the event of a tie, we will choose the first legal action encountered among those of equal value. This ensures that when multiple actions yield the same value, the agent chooses the first one in the list.
QS 4.1: The Expectimax algorithm is a modification of the minimax algorithm. The algorithm explores the game tree, considering both deterministic actions of the player (Pacman) and probabilistic actions of the opponents (ghosts). At each level, for ghosts, it computes the average value of their possible moves. The algorithm chooses Pacman's action at the top level based on the maximum expected value, combining the probabilities of the opponentâ€™s moves.
QS 5.1: The betterEvaluationFunction evaluates game states by considering multiple components. It uses the distance to the closest ghost, the presence and distance to scared ghosts, the number of remaining food pellets, available power capsules, the distance to the center, and the current game state. The function uses weighted factors to balance the importance of each component. This approach tries to capture the complexity of the game, giving a more efficient evaluation function compared to the previous version.
